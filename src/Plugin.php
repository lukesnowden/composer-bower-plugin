<?php

namespace PhpKit\ComposerBowerPlugin;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Json\JsonFile;
use Composer\Package\CompletePackage;
use Composer\Plugin\PluginInterface;
use Composer\Script\Event;

class Plugin implements PluginInterface, EventSubscriberInterface
{

    protected $composer;
    protected $io;
    protected $lead = "<comment>[bower-plugin]</comment>";

    public static function getSubscribedEvents()
    {
        return [
            'post-install-cmd' => [
                ['onPostUpdate', 0],
            ],
            'post-update-cmd'  => [
                ['onPostUpdate', 0],
            ],
        ];
    }

    public function activate( Composer $composer, IOInterface $io )
    {
        $this->composer = $composer;
        $this->io       = $io;
    }

    public function onPostUpdate( Event $event )
    {

        putenv( 'COMPOSER_IS_RUNNING=true' );

        $requires    = [];
        $overrides   = [];
        $resolutions = [];
        $excludes    = [];

        if( $event->isDevMode()) {
            $extra = $this->composer->getPackage()->getExtra();
            $bower = isset( $extra['bower'] ) ? $extra['bower'] : [];
            if( isset( $bower['require-dev'] ) ) {
                $requires = $this->_mergeDependencyVersions( $requires, $bower['require-dev'] );
            }
        }

        $packages = [ $this->composer->getPackage() ];
        $packages = array_merge( $packages, $this->composer->getRepositoryManager()->getLocalRepository()->getCanonicalPackages() );
        foreach( $packages as $package ) {
            if( $package instanceof CompletePackage ) {
                $extra = $package->getExtra();
                $bower = isset( $extra['bower'] ) ? $extra['bower'] : [];

                if( isset( $bower['require'] ) ) {
                    $requires = $this->_mergeDependencyVersions( $requires, $bower['require'] );
                }
                if( isset( $bower['exclude'] ) ) {
                    $excludes = array_merge_recursive($excludes, $bower['exclude']);
                }
                if( isset( $bower['overrides'] ) ) {
                    $overrides = array_merge_recursive($overrides, $bower['overrides']);
                }
                if( isset( $bower['resolutions'] ) ) {
                    $resolutions = $bower['resolutions'];
                }
            }
        }

        foreach( $requires as $name => $version ) {
            if(  in_array( $name, $excludes ) ) {
                unset( $requires[$name] );
            }
        }

        if( ! $requires ) {
            $this->info("No Bower packages are required by the application or by any installed Composer package");
        }
        $dependencies = $this->_installBower( $requires, $overrides, $resolutions );
        $this->info( ( count( $dependencies ) ?: "No" ) . " bower packages are installed" );
    }

    /**
     * @return null
     */
    protected function info()
    {
        if( $this->io->isDebug() ) {
            call_user_func_array([$this, 'write'], func_get_args());
        }
        return null;
    }

    /**
     * @return null
     */
    protected function write()
    {
        foreach( func_get_args() as $msg ) {
            $lines = explode( PHP_EOL, $msg );
            if( $lines ) {
                $this->io->write( "$this->lead " . array_shift( $lines ) );
                if( $lines ) {
                    $msg = implode( PHP_EOL . '    ', $lines );
                    $this->io->write( "    $msg" );
                }
            }
        }
        return null;
    }

    private function _installBower( $requires, $overrides, $resolutions )
    {
        $out    = [];
        $retVar = null;
        exec("bower --version 2>&1", $out, $retVar);
        if( $retVar) {
            throw new \Exception("Bower isn't installed.");
        } else {
            $bowerBin = 'bower';
        }
        $jsonFile = new JsonFile('bower.json');
        if( $jsonFile->exists() ) {
            $packageJson = $jsonFile->read();
            if( ! isset( $packageJson['name'] ) || $packageJson['name'] != 'temp-composer-bower-plugin' ) {
                //assume we can overwrite our own temp one
                throw new \Exception( "Can't install Bower dependencies as there is already a bower.json" );
            }
        } else {
            $packageJson = [
                'name'        => 'temp-composer-bower-plugin',
                'description' => "This file is auto-generated by 'php-kit/composer-bower-plugin'. " . "Warning: do NOT edit this file.",
            ];
        }
        $packageJson['dependencies'] = $requires;
        if( $overrides ) {
            $packageJson['overrides'] = $overrides;
        }
        if( $resolutions ) {
            $packageJson['resolutions'] = $resolutions;
        }
        $jsonFile->write( $packageJson );
        if( ! file_exists( '.bowerrc' ) ) {
            $vd = $this->composer->getConfig()->get( 'vendor-dir' );
            if( substr( $vd, 0, strlen( getcwd() ) ) == getcwd() ) {
                //make vendor-dir relative go cwd
                $vd = substr($vd, strlen(getcwd()) + 1);
            }
            $config = [ 'directory' => $vd . '/bower_components' ];
            file_put_contents( '.bowerrc', json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE ) );
        }
        $this->write( $requires ? "Installing/updating Bower packages" : "Removing Bower packages(if any)" );
        $cmd = "$bowerBin --allow-root install --force";
        passthru( $cmd, $retVar );
        if( $retVar) {
            throw new \RuntimeException( 'bower install failed' );
        }
        $cmd = "$bowerBin --allow-root prune";
        passthru( $cmd, $retVar );
        if( $retVar) {
            throw new \RuntimeException('bower prune failed');
        }

        $config              = json_decode( file_get_contents( '.bowerrc' ), true );
        $installedBowerFiles = glob( $config['directory'] . '/*/.bower.json' );

        //detect actually installed versions
        $ret = [];
        foreach( $installedBowerFiles as $installedBowerFile ) {
            $installedBower               = json_decode( file_get_contents( $installedBowerFile ), true );
            $dep                          = $installedBower['_source'] . '#' . $installedBower['_release'];
            $ret[$installedBower['name']] = $dep;
        }
        return $ret;
    }

    /**
     * Merges 2 version of arrays.
     *
     * @param array $array1
     * @param array $array2
     * @return array
     */
    private function _mergeDependencyVersions(array $array1, array $array2)
    {
        foreach($array2 as $package => $version) {
            if( !isset($array1[$package])) {
                $array1[$package] = $version;
            }
            else {
                if( $array1[$package] != $version) {
                    $array1[$package] .= " " . $version;
                }
            }
        }
        return $array1;
    }
}
